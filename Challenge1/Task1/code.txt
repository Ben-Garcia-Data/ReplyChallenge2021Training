def file_reader(file_location):
    import ast
    print('Begining to read file')
    file1 = open(file_location, 'r')
    Lines = file1.readlines()
    file1.close() # Close here or at end of function?
    print('Done reading. Now to eval')

    output = []

    count = 0

    # Strips the newline character
    for line in Lines:
        try:
            s = line.strip().split()
            #print(s)

            for entry in range(len(s)):
                #print(s[entry])
                s[entry] = int(s[entry])

            output.append(s)

            #print("A")
        except:
            #print("B")
            output.append(line)

    print('Done evaling file')
    #print(output)
    T = output[0]

    output_list = []
    this_case = []

    for entry in output:
        if len(entry) == 1:
            continue
        if len(entry) == 2 and len(this_case) != 0:
            #print('This entry is a new case')
            output_list.append(this_case)
            this_case = []
            this_case.append(entry)
        else:
            this_case.append(entry)

    output_list.append(this_case)

    #print('T: ' + str(T))

    return T[0], output_list


def analyser(all_logs):
    #print("")
    #print(all_logs)
    #print('Beginning to combine team data.')

    extra_data = all_logs.pop(0)
    N = extra_data[0]
    L = extra_data[1]

    all_logs_dict = {}
    #counter = 0
    prev_solved_dict = {}

    for log in all_logs:
        #print("Log: {}".format(log))



        if log[4] == 0:
            #all_logs.remove(log) # Remove the log if it's a failed attempt
            continue



        if log[1] in prev_solved_dict.keys():
            #print("A")
            #print("Team: {}".format(log[1]))
            #print(str(log[2]) + "," + str(log[3]))
            #print(prev_solved_dict[log[1]])
            #print(prev_solved_dict)
            if str(log[2]) +","+ str(log[3]) in prev_solved_dict[log[1]]:
                #print("B")
                continue
            else:
                #print("C")
                #print("debug")
                prev_list = prev_solved_dict[log[1]]
                #print(prev_list)
                #print(type(prev_list))
                new_data = str(str(log[2]) +","+ str(log[3]))
                #print(new_data)
                #print(type(new_data))
                prev_list.append(new_data)
                #print(prev_list)
                prev_solved_dict[log[1]] = prev_list
                #print(prev_solved_dict[log[1]])
                #print(prev_solved_dict)

        else:
            #print("D")
            prev_solved_dict[log[1]] = [str(str(log[2]) +","+ str(log[3]))]
            #print(prev_solved_dict)



        if log[1] in all_logs_dict.keys():
            #print("E")
            #print("")
            old_data = all_logs_dict[log[1]]
            old_data[0] += log[0]
            old_data[3] += log[3]
            all_logs_dict[log[1]] = old_data



        else:
            #print("F")
            all_logs_dict[log[1]] = log
            #all_logs.remove(log)



    #print(all_logs_dict)
    #print(all_logs_dict.values())
    output_list = list(all_logs_dict.values())

    #print(output_list)
    #print('Done combining data')
    return output_list, N, L

# Need a list with format such as: [{},{},{},{}] or [[],[],[],[]]

def sorter(input):
    #print('Begining to sort data')
    #print(input)
    import operator
    input.sort(key=operator.itemgetter(0),reverse=False)

    input.sort(key=operator.itemgetter(3),reverse=True)

    return input

def print_results(T, input, casenum):

    #print("")
    #print(input)
    #print(T)

    team_ids_string = ""
    counter = 0
    for team in input:
        if counter < 4:
            #print(team)
            counter += 1
        team_ids_string += " " + str(team[1])

    print("Case #{}:{}".format(casenum,team_ids_string))


# Read the file.
# Get a list of team ID's.
# Analyse the data.
# Sort the data.
# Write the data.


T, data = file_reader(r"C:\Users\PC\Desktop\Code\replychallenge\Task1\realinput.txt")
casenum = 0
for case in data:
    casenum += 1
    #print("Case: {}".format(casenum))
    analysed_data, N, L = analyser(case)
    sorted_data = sorter(analysed_data)
    print_results(T,sorted_data,casenum)
    #print("")

# Data comes in the format
# timestamp teamid problemid inputid scored
#

# Input file has format:
# Line 1: T = # of test cases to solve, N = num of teams & L = # of logs.


# First thing to work out is to combine score and time for every team, then sort.

# Within a log (in list format), log[0] = timestamp, log[1] = teamID, log[2] = problemID, log[3] = inputID, log[4] = solved? (1/0)

# The output needs to be T lines and each line should be the team numbers in order.
