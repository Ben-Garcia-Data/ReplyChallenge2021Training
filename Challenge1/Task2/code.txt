# N servers, arranged in a single row numbered 0 to N-1.

# Input:
# T Cases to solve
#


def file_reader(file_location):
    import ast
    print('Begining to read file')
    file1 = open(file_location, 'r')
    Lines = file1.readlines()
    file1.close() # Close here or at end of function?
    #print('Done reading. Now to eval')

    output = []

    count = 0

    # Strips the newline character
    for line in Lines:
        try:
            s = line.strip().split()
            #print(s)

            for entry in range(len(s)):
                #print(s[entry])
                s[entry] = int(s[entry])

            output.append(s)

            #print("A")
        except:
            #print("B")
            output.append(line)

    #print('Done evaling file')
    #print(output)
    T = output[0]

    output_list = []
    this_case = []

    for entry in output:
        if len(entry) == 1:
            continue
        if len(entry) == 2 and len(this_case) != 0:
            #print('This entry is a new case')
            output_list.append(this_case)
            this_case = []
            this_case.append(entry)
        else:
            this_case.append(entry)

    output_list.append(this_case)

    #print('T: ' + str(T))

    return T[0], output_list

def analyser(N, P, CP):
    import math
    #print('Starting new case')
    servers_needed = math.ceil(P / max(CP))

    sorted_CP = CP.copy()
    sorted_CP.sort(reverse=True)
    #print('Done sorting')
    #print(sorted_CP)
    #print("P = " + str(P))

    def enough_servers(sorted_CP,P,servers_needed):
        #print('Testing {} servers: {}'.format(servers_needed,sorted_CP[0:servers_needed]))
        if sum(sorted_CP[0:servers_needed]) > P:
            #print('Yup that works.')
            return servers_needed
        else:
            #print('We need more servers')
            servers_needed += 1
            servers_needed = enough_servers(sorted_CP,P,servers_needed)
            return servers_needed


    servers_needed = enough_servers(sorted_CP, P, servers_needed)
    #print("Done servers needed")
    #print(servers_needed)

    #print(CP)


    def test(N, CP, servers_needed):
        #print("Starting test")
        CP_dict = {}

        # This double for loop could perhaps be replaced with a single one and clever use of a dict?

        for y in range(N):
            #print('y = {}'.format(y))

            for x in range(N - servers_needed):
                sum_new_arr = sum(CP[y:y + x + servers_needed])
                if sum_new_arr == P:
                    #print('Found match')
                    #print('{} => {}'.format(new_arr, sum_new_arr))
                    return y, x

                elif sum_new_arr > P:
                    try:
                        if sum_new_arr < min(CP_dict.keys()):
                            CP_dict[sum_new_arr] = [y,x]
                    except ValueError:
                        CP_dict[sum_new_arr] = [y, x]
                        #print("Value error")

                    #summed_CP.append(sum(CP[y:y + x + servers_needed])) # Might be able to comment out this line.
                    break

            #list_of_summed_CPs.append(summed_CP)
        #print("End test part 1")
        #print('If we get here, there were no matches.')
        #print(CP_dict)

        # 1 power unit at a time, we need to look thru all these lists for a match. If it is a match,
        # get the location in the lists and use that to deduct the y & x values (y = location in main arr,
        # x = location in sub arr)

        output = (CP_dict[min(CP_dict.keys())])
        return output[0],output[1]


    y, x = test(N, CP, servers_needed)
    #print("Done test")
    #print(y, x, servers_needed)

    l = y
    r = x + servers_needed + y - 1

    #print(CP[l:r])



    return l, r




T, data = file_reader(r"C:\Users\PC\Desktop\Code\replychallenge\Task2\realinput.txt")
casenum = 0
for case in data:
    casenum += 1
    N = case[0][0]
    P = case[0][1]
    CP = case[1]
    l, r = analyser(N, P, CP)
    print("Case #{}: {} {}".format(casenum,l, r))